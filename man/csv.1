.TH CSV "1" "April 2017" "csv 2.3.1" ""
.SH NAME
csv \- convert csv files to json and other formats
.SH SYNOPSIS
\fBcsv\fR
[\fIMODE\fR]
[\fIOPTIONS\fR]
[\fB\-\-\fR]
[\fICOLUMNNAME\fR...]
.de co
.  P
.  nf
.  RS 4
..
.de cm
.  co
.  B "\\$1"
.  P
..
.de cx
.  RE
.  fi
.  P
..
.SH DESCRIPTION
This program reads CSV from its standard input (\fIstdin\fR)
and outputs the contents in a different format.
.P
CSV (\(lqComma Separated Values\(rq)
is a simple, tabular, widely-used data exchange format
mostly used for textual and numeric data.
Unfortunately, there are many different implementations.
This program aims to be fully RFC\ 4180-compliant
while supporting many common standard\ violations as well.
.SH INPUT MODES
The program operates in one of several
.B input modes
to read its input.
.br
The default input mode is \fB\-a\fR.
.TP
.B \-a, \-\-auto\-columns
Automatic column names:
Column names will be read automatically from the first CSV line.
In this mode, \fICOLUMNNAME\fR specifications are
neither needed nor possible.
(This is the default mode.)
.TP
.B \-n, \-\-named\-columns
Non-fixed, named columns:
The program reads column names from the argument list
and compares them to the first line of the CSV input,
printing only the named columns.
Separate column names with a single \(lq\fB.\fR\(rq argument!
The name order is irrelevant, as is case.
See the section \(lqNamed Columns Mode\(rq below
for more information about this input mode.
.TP
.B \-g, \-\-assigned\-names
Names assigned to column positions:
The program reads column names from the argument list and
applies them to all lines.
The special name \(lq\fB@\fR\(rq
causes columns to be ignored.
The argument order represents
the column order in the CSV input.
The input's first line will not be treated specially.
.TP
.B \-i, \-\-numbered\-columns
Numbered columns:
In this mode,
the columns will be automatically numbered,
starting from zero.
Similar to \(lq\fB\-g 0 1 2 3\fR...\(rq,
but will force the \fB\-j\fR output mode to print each line
as an array instead of an object.
Not compatible with \fB\-J\fR and \fB-C\fR output modes.
In this mode,
\fICOLUMNNAME\fR specifications are
neither needed nor possible.
The first input line will not be treated specially.
.SH OUTPUT MODES
The program operates in one of several
.B output modes\fR.
.br
The default output mode is \fB\-m\fR.
.TP
.B \-m, \-\-simple
Simple output:
For every input field, one line will be printed,
with the column name, a colon and a space, and the content.
Input lines will be separated with an extra line containing only a dash.
Backslashes in the input will be replaced with a literal \fB\\\\\fR,
while linebreaks in the input will be replaced with a literal \fB\\n\fR
(if the \fB\-b\fR option is given).
.TP
.B \-j, \-\-json
Long JSON output:
An ordered array of input lines is printed.
Every line is represented by an object
with the column names as keys and the field values as values.
(In the \fB\-i\fR input mode,
every line is represented as an ordered array instead.)
.TP
.B \-J, \-\-compact\-json
Compact JSON output:
An object with a \(lq\fIcolumns\fR\(rq and a \(lq\fIlines\fR\(rq key is returned.
The \(lq\fIcolumns\fR\(rq entry is an ordered array of the column names.
The \(lq\fIlines\fR\(rq entry is an ordered array of ordered arrays,
each of which represents one input line.
.TP
.B \-X, \-\-shell-vars
Output in shell\ variable\ assignment format.
See the \(lqExamples\(rq section below.
.TP
.B \-C, \-\-csv-output
Standardized CSV output.
See the \(lqCSV output mode\(rq section below for more details.
.SH OTHER OPTIONS
.TP
\fB\-d\fR \fIC\fR, \fB\-\-separator\fR \fIC\fR
Use field separator character \fIC\fR.
The special value \(lq\fIauto\fR\(rq
causes auto-detection
on the first input line
(this is the default mode).
The special value \(lq\fInone\fR\(rq
disables separator character detection
(use this for single-column input files).
.TP
.B \-b, \-\-allow\-breaks
By default,
every record is assumed to span exactly one line.
This option allows quoted fields to contain linebreaks,
i.e. to span several lines.
Without this option,
multi-line field values will cause an error.
.TP
\fB\-s\fR \fIN\fR, \fB\fB\-\-skip\fR \fIN\fR
Skip the first \fIN\fR input lines.
In modes \fB\-n\fR and \fB\-a\fR,
skip the first \fIN\fR input lines
after the header line.
Setting \fIN\fR to zero means no\ skip,
which is the default.
.TP
\fB\-l\fR \fIN\fR, \fB\-\-limit\fR \fIN\fR
Stop after the \fIN\fRth input line.
In modes \fB\-n\fR and \fB\-a\fR,
the header line is not counted.
Setting \fIN\fR to zero removes the limit, which is the default.
.TP
.B \-e, \-\-ignore\-errors
Don't stop on encountering malformed CSV input;
instead, truncate the current field value and continue.
(By default, malformed CSV input
terminates the program with exit status 2.)
Malformed input includes:
.PD 0
.RS
.IP - 2
too many columns
.IP - 2
overlong fields
.IP - 2
unexpected quote characters
.IP - 2
unexpected end-of-line (within a quoted field)
.IP - 2
unexpected end-of-file (within a quoted field)
.RE
.PD
.TP
\fB\-\-color\fR[=\fIWHEN\fR], \fB\-\-colour\fR[=\fIWHEN\fR]
Enables or disables colorized output.
Possible values for \fIWHEN\fR:
.PD 0
.RS
.IP - 2
.BR auto :
Colorize output if \fIstdout\fR is a terminal.
This is the default setting if the option is missing.
.IP - 2
.BR always / force / on :
Always colorize the output,
even if it's redirected to a file.
Useful if the output gets directed to a pager like \fBless\fR(1).
This is the default if the option is given without \fIWHEN\fR.
.IP - 2
.BR never / off :
Don't colorize the output.
.RE
.PD
.TP
\fB\-\-trim\fR[=\fIMODE\fR]
Enables or disables input whitespace trimming.
Whitespace in this context refers only to tabs (\fB\\t\fR) and spaces.
Possible values for \fIMODE\fR:
.PD 0
.RS
.IP - 2
.BR lines / records :
Removes whitespace from the start and end of every input line.
This is the default if the option is given without \fIMODE\fR.
.IP - 2
.BR none / off :
No whitespace removal.
Whitespace at the start/end of a line
is considered to be part of the first/last field's value.
This is the default setting if the option is missing.
.RE
.PD
.TP
.B \-F, \-\-flush
Flush the output after every input line.
.TP
.B \-M, \-\-keep\-bom
Don't try to remove UTF\-8/16 BOMs from the first line.
(By default, the program will strip the BOM from the first line,
if there is one.)
.TP
.B \-u, \-\-unknowns
With this option, the \fB-n\fR mode will include all unknown columns,
like a combination of the \fB-n\fR and \fB-a\fR modes.
(By default, the \fB-n\fR input mode will discard all unknown columns.)
.TP
.B \-U, \-\-no-unknowns
With this option, the \fB-n\fR mode will output only explicitly named columns.
This is the default behavior.
The option is the opposite of the \fB-u\fR option
and has no effect in other input modes.
.TP
.B \-h, \-\-help
Show command line usage information.
.TP
.B \-V, \-\-version
Show program version and licensing information.
.SH NAMED COLUMNS MODE
The \fB\-n\fR input mode is useful
if the input column names are known in advance,
but not their position.
.br
For example,
calling the program with the arguments
\(lq\fB\-n phone . fax .\fR\(rq
will extract the columns
\(lq\fIphone\fR\(rq
and \(lq\fIfax\fR\(rq
from the input (if they exist),
regardless of their position.
All other columns will be ignored.
.P
The input mode also supports
\fBcolumn aliases\fR.
This is useful if several names with the same meaning
are acceptable for one column.
To use this feature,
list the accepted column aliases
after the column name.
The\ \(lq\fB.\fR\(rq\ argument
separates the column aliases
from the next column definition.
.br
For example,
the invocation
\(lq\fB\-n\ phone tel telephone telno\ . fax telefax faxno\ .\fR\(rq
will again extract the columns 
\(lq\fIphone\fR\(rq
and \(lq\fIfax\fR\(rq
from the input
(and will always call them thus in the output),
but will also recognize them
under one of several possible name variants.
.P
Keep in mind that the program
will do byte-wise string comparisons
between the arguments and the input column names,
without any encoding conversion
or canonization.
The only normalization done
is lower-casing with \fBtolower\fR(3),
which only works on plain ascii letters (A..Z).
.SH CSV OUTPUT MODE
In CSV output mode (\fB\-C\fR), the program will print valid CSV.
It tries to follow RFC\ 4180 as closely as possible:
it uses a plain comma as field separator,
uses CRLF as record separator,
quotes fields with double-quotes
and escapes double-quotes in fields by doubling them,
and only quotes fields that contain a special character.
LF\ linebreaks in fields will always be printed as CRLF.
.P
However in contrast to RFC\ 4180
which mandates plain 7-bit ASCII input
and forbids use of control characters below 0x1F,
this mode will accept any encoding
and all special characters
and output everything as-is.
.P
This mode may be useful to filter or rename columns in existing CSV files
and to change unusual separator characters in existing CSV files to the standard comma.
.P
This mode will remove all NUL bytes from the input.
.SH PRETTY-PRINTING
The program has limited pretty-printing capabilities:
if the output (\fIstdout\fR) is a tty,
the output will be colorized.
Indentation will not be changed in any way.
(See the \fB--color\fR\ option
to force pretty-printing if \fIstdout\fR is not a\ tty
or to disable it completely.)
.IP - 2
Column names will be printed in green.
.IP - 2
Structural elements,
such as record separators,
will be printed in yellow.
.IP - 2
Escaped characters
will be printed in cyan.
.IP - 2
Everything else,
including the field contents,
will be printed in the terminal's default color.
.P
.SH EXAMPLES
All examples assume this CSV file as input:
.co
h1;h2;h3
c1;c2;c3
ca;"cb""";cc
cx;cy;cz
.cx
The default input mode is \fB\-a\fR
(get column names automatically from first line).
The default output mode is \fB\-m\fR
(simple output).
This is what is looks like:
.cm "csv < test.csv"
h1: c1
h2: c2
h3: c3
\-
h1: ca
h2: cb"
h3: cc
\-
h1: cx
h2: cy
h3: cz
.cx
In contrast, this is what the \fB\-j\fR (JSON) output mode
looks like with the same input:
.cm "csv \-j < test.csv"
[{"h1":"c1","h2":"c2","h3":"c3"}
,{"h1":"ca","h2":"cb\\"","h3":"cc"}
,{"h1":"cx","h2":"cy","h3":"cz"}]
.cx
The \fB\-J\fR output mode (compact JSON)
only prints the column names once:
.cm "csv \-J < test.csv"
{"columns": ["h1","h2","h3"],
"lines": [
 ["c1","c2","c3"]
,["ca","cb\\"","cc"]
,["cx","cy","cz"]]}
.cx
In the \fB\-i\fR input mode,
the first line is not considered special.
Instead, all columns are automatically numbered:
.cm "csv \-i < test.csv"
0: h1
1: h2
2: h3
\-
0: c1
1: c2
2: c3
\-
0: ca
1: cb"
2: cc
\-
0: cx
1: cy
2: cz
.cx
As a special case,
the long JSON mode\ (\fB\-j\fR) omits the auto-numbered column names
of the \fB\-i\fR input mode.
Thus,
an array
instead of an object
will be printed
for every record,
simplifying further JSON processing.
.cm "csv \-i \-j < test.csv"
[["h1","h2","h3"]
,["c1","c2","c3"]
,["ca","cb\\"","cc"]
,["cx","cy","cz"]]
.cx
Finally, the \fB\-X\fR output mode
generates shell variable assignments
like this:
.cm "csv \-X < test.csv"
CSV_COLNAME_0=h1
CSV_COLNAME_1=h2
CSV_COLNAME_2=h3
CSV_0_0=c1
CSV_0_1=c2
CSV_0_2=c3
CSV_1_0=ca
CSV_1_1="cb\\""
CSV_1_2=cc
CSV_2_0=cx
CSV_2_1=cy
CSV_2_2=cz
CSV_RECORDS=3
.cx
The varname scheme is
\(lqCSV_\fIlineno\fR_\fIfieldno\fR\(rq,
with lines and fields counted from zero.
.P
Again, there's a special case for the \fB\-i\fR input mode,
because it has no relevant column names:
The \(lqCSV_COLNAME_\fIcolno\fR\(rq assignments will be omitted,
and the first input line is read as a regular record.
.cm "csv \-i \-X < test.csv"
CSV_0_0=h1
CSV_0_1=h2
CSV_0_2=h3
CSV_1_0=c1
CSV_1_1=c2
CSV_1_2=c3
CSV_2_0=ca
CSV_2_1="cb\\""
CSV_2_2=cc
CSV_3_0=cx
CSV_3_1=cy
CSV_3_2=cz
CSV_RECORDS=4
.cx
.SH INPUT
.SS Encoding
The program is encoding-agnostic,
so long as
a single-byte character is used as field separator
and LF\ (\fB\\n\fR) or CRLF\ (\fB\\r\\n\fR) is used as record separator.
.P
NB:
Some encodings,
like UTF\-16 and UTF\-32,
may use CR/LF bytes
to represent other characters.
This will result in unexpected output,
since the program is not wide\ character-aware.
Plain ASCII or UTF\-8 are safer choices,
because they never use a low byte
for the representation of another character.
.P
It is recommended that input
in an encoding
other than plain ASCII or UTF\-8
is converted to UTF\-8
with a tool like \fBiconv\fR(1)
before being passed to this program.
.SS Separator Character
By default,
the program will look for a field separator character
in the first input line;
the first such character found there
will be used for the rest of the input.
Accepted separator characters are
comma\ (\fB,\fR),
semicolon\ (\fB;\fR),
tabulator\ (\fB\\t\fR),
and
pipe\ (\fB|\fR).
If the input uses a different separator character,
specify it manually with the \fB\-d\fR option.
.P
Both the auto-detection feature
and the \fB\-d\fR option
support one-byte separators only
and assume that the input
does not use more than one distinct separator.
Input files using multiple different separators
and/or multibyte separators
cannot be parsed correctly.
.SS Quoting
Input fields may be quoted
either with single (\fB'\fR)
or double apostrophes (\fB"\fR).
This quoting character
will be removed from the output.
Fields need not be quoted,
except for multiple-line values
(see option \fB\-b\fR)
or fields containing the separator character.
If the quoting character
is present inside a quoted field,
it must be doubled.
.P
For example,
.br
\fB"field""with""quotes"\fR
will be interpreted as \fBfield"with"quotes\fR,
whereas
.br
\fBfield""without""quotes"\fR
will be interpreted as-is.
.SS Single-Column CSV Files
Single-column files can be used as input,
but the separator auto-detection
(in case of \(lq\fB\-d auto\fR\(rq
or no \fB\-d\fR argument at all)
will fail and terminate the program
with exit\ code\ 3.
.P
To correctly read single-column files,
use \(lq\fB\-d none\fR\(rq,
which tells the program
that the input does not contain any actual separator characters.
.P
Alternatively, use the \fB\-e\fR option,
as a missing separator character can be ignored;
however, this will cause malformed CSV input to be ignored as well.
.SS Multi-Line Column Names
If the first input field contains linebreaks,
the automatic separator\ detection
won't be able to find the separator
and terminate the program
with exit\ code\ 3,
as it only checks the first input line.
In this case, it is necessary
to manually specify the separator character
with the \fB\-d\fR\ option.
.SH EXIT CODES
By default,
the program will terminate with exit code zero (success).
Other exit codes
signify various error conditions:
.TP
.B 1
Syntax error
(invalid arguments, missing, or too many column names).
.TP
.B 2
Input format error
(too many column,
no column match,
empty header line,
unexpected quote/EOL/EOF).
Note that when the program exits with code\ 2,
it will already have printed parts of the CSV contents.
.TP
.B 3
No separator found on first line.
.TP
.B 4
Empty input.
(This is only an error in input modes \fB\-n\fR and \fB\-a\fR,
whereas input modes \fB\-g\fR and \fB\-i\fR can handle empty input gracefully.)
.TP
.B 10
Internal error
(out of memory or getline(3) read error).
.SH LICENSE
MIT
(https://opensource.org/licenses/MIT)
.SH AUTHOR
Maximilian Eul <maximilian@eul.cc>
(https://github.com/mle86)
.SH STANDARDS
Y.\ Shafranovich,
\fICommon Format and MIME Type for Comma-Separated Values (CSV) Files\fR,
RFC\ 4180
(https://tools.ietf.org/html/rfc4180),
October 2005.
.P
T.\ Bray,
\fIThe JavaScript Object Notation (JSON) Data Interchange Format\fR,
RFC\ 7159
(https://tools.ietf.org/html/rfc7159),
March 2014.
